if version < 800
  runtime autoload/vim-pathogen/autoload/pathogen.vim
  call pathogen#infect()
endif

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       Basic Settings                "
"                                     "
"""""""""""""""""""""""""""""""""""""""
let mapleader=","

" Vim5 and later versions support syntax highlighting. Uncommenting the
" following enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set hlsearch  " Highlight search.
set incsearch " Incremental search.
set mouse=a   " Enable mouse usage (all modes).
set showcmd   " Show (partial) command in status line.
set showmatch " Show matching brackets.

set autoindent
set cindent
set expandtab
set nobackup
set noswapfile
set noundofile
set number
set shiftwidth=4
set smartindent
set smarttab
set tabstop=4

set fileencodings=utf-8,gb18030,gbk,gb2312,cp936
set fileformats=unix,dos,mac

set list
set listchars=tab:>-,trail:$

set laststatus=2
set statusline=%F\ %h%m%r%=%-14.(%l,%c%V%)
set scrolloff=10

set display=lastline
set nocompatible
set backspace=indent,eol,start

set wildmenu

command -nargs=1 Vsb call VsbFunction(<f-args>)

function VsbFunction (arg1)
  execute 'vert sb' a:arg1
endfunction

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       minibuf plugin config         "
"                                     "
"""""""""""""""""""""""""""""""""""""""
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplModSelTarget = 1
"let g:miniBufExplUseSingleClick = 1
"let g:miniBufExplorerMoreThanOne = 0

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       airline plugin config         "
"                                     "
"""""""""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts=1
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_min_count = 0
let g:airline#extensions#tabline#fnamemod = ':p:t'

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       Autocmd Settings              "
"                                     "
"""""""""""""""""""""""""""""""""""""""
if has("autocmd")
" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
  filetype plugin indent on
  set completeopt=longest,menu

  function! s:Autoexpandtab()
    let l:line = line('$')
    let l:tab = &expandtab
    for l:index in range(1, l:line)
      let l:sline = getline(l:index)
      if l:sline !~# "^{" && l:sline !~# "{$"
        continue
      endif
      if l:sline =~# "^\t"
        let l:tab = 0
        break
      elseif l:sline =~# '\v^ {4}'
        let l:tab = 1
        break
      endif
    endfor
    if l:tab != &expandtab
      let &expandtab = l:tab
    endif
  endfunction

  augroup SELF
" Uncomment the following to have Vim jump to the last position when
" reopening a file
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

    au BufReadPost *.c call s:Autoexpandtab()
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       Map define                    "
"                                     "
"""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <leader>yw viw"+y
nnoremap <silent> <leader>yf :let @+=expand('%:t')<CR>
nnoremap <silent> <leader>yp :let @+=expand('%:p')<CR>
nnoremap <c-left> <c-w><left>
nnoremap <c-right> <c-w><right>
nnoremap <c-up> <c-w><up>
nnoremap <c-down> <c-w><down>
nnoremap <silent> <leader>1 :NERDTreeToggle<CR>
nnoremap <silent> <leader>2 :Tagbar<CR>
nnoremap <silent> <leader>b :bn<CR>
nnoremap <silent> <leader>p :bp<CR>

function! CapitalizeCenterAndMoveDown()
    s/\<./\u&/g
    center
    +1
endfunction
"nnoremap <silent> <leader>c :call CapitalizeCenterAndMoveDown()<CR>

" search this word in this file
nnoremap <silent><leader>w :execute "lvimgrep /\\<" . expand("<cword>") . "\\>/j %*" <BAR> lopen<CR>
" search this word in this folder
nnoremap <silent><leader>d :execute "lvimgrep /\\<" . expand("<cword>") . "\\>/gj **" <BAR> lopen<CR>
" search this select in this file
nnoremap <silent><leader>/ :set operatorfunc=WGrepOperator<CR>g@
vnoremap <silent><leader>/ :<c-u>call WGrepOperator(visualmode())<CR>

function! WGrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    execute "lvimgrep /" . expand(@@) . "/j %"
    lopen

    let @@ = saved_unnamed_register
endfunction

cnoremap <C-V> <C-R>+
" * and # to search in v-mode selected
vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(
    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(
    \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

"""""""""""""""""""""""""""""""""""""""
"                                     "
"       Settings Stash                "
"                                     "
"""""""""""""""""""""""""""""""""""""""
" set completeopt=menu,preview
" set ruler
" set ignorecase		" Do case insensitive matching.
" set smartcase		" Do smart case matching.
" set autowrite		" Automatically save before commands like :next and :make.
" set hidden         " Hide buffers when they are abandoned.
" set langmenu=zh_CN.UTF-8
" set helplang=cn
" set foldmethod=indent
" set grepprg=grep\ --exclude-dir=svn\ --exclude-dir=\.git\ -rns
" set path=.
" let g:netrw_winsize=30
" iabbrev mmain int main() {<CR>!cursor!<LF>}<Esc>:call search('!cursor!','b')<CR>cf!
" if has("autochdir")
"     let g:miniBufExplorerMoreThanOne = 0
"     set autochdir
" else
"     let g:vimgdb_debug_file=""
"     run <silent>  macros/gdb_mappings.vim
" endif
" inoremap <LEFT>  <NOP>
" inoremap <RIGHT> <NOP>
" inoremap <UP>    <NOP>
" inoremap <DOWN>  <NOP>
" inoremap <ESC>   <NOP>
" inoremap jk      <ESC>l

